let s:VimPluginsPath = $HOME . '/vimplugins'
let s:VimPlugins = []

function! s:plug(plugin) abort
	call add(s:VimPlugins, a:plugin)
endfunction

function! s:Enabled(plugin) abort
	return index(s:VimPlugins, a:plugin) != -1 ? 1 : 0
endfunction

"***************************************
" Define load plugin
"***************************************
call s:plug('vim-lucius')
call s:plug('stline.vim')
call s:plug('gr.vim')
call s:plug('oldfiles.vim')
call s:plug('minfy.vim')
call s:plug('vim-easymotion')
call s:plug('vimdoc-ja')
call s:plug('various.vim')
call s:plug('vim-fugitive')
"call s:plug('gruvbox')
"call s:plug('ddc-around')
"call s:plug('ddc-matcher_head')
"call s:plug('ddc.vim')

"***************************************
" Define plugin loading configuration
"***************************************
function! s:load_config() abort
	" jonathanfilip/vim-lucius
	if s:Enabled('vim-lucius')
		colorscheme lucius
		let g:lucius_style = 'dark'
	endif

	" jonathanfilip/vim-lucius
	if s:Enabled('gruvbox')
		let g:gruvbox_bold=0
"		set bg=dark
		colorscheme gruvbox
	endif

	" Shougo/ddc.vim
	if s:Enabled('ddc.vim')
		call ddc#custom#patch_global('sources', ['around'])
		call ddc#custom#patch_global('sourceOptions', {
			\ '_': {
			\     'matchers': ['matcher_head'],
			\ }})
		inoremap <silent><expr><Tab> pumvisible() ? '<C-n>' : '<Tab>'
		inoremap <silent><expr><S-Tab> pumvisible() ? '<C-p>' : '<S-Tab>'
		call ddc#enable()
	endif

	" atsumori123/stline.vim
	if s:Enabled('stline.vim')
		let g:stline_theme = 'monochrome'
		nmap <leader>1 <Plug>STLine.Go(1)
		nmap <leader>2 <Plug>STLine.Go(2)
		nmap <leader>3 <Plug>STLine.Go(3)
		nmap <leader>4 <Plug>STLine.Go(4)
		nmap <leader>5 <Plug>STLine.Go(5)
		nmap <leader>6 <Plug>STLine.Go(6)
		nmap <leader>7 <Plug>STLine.Go(7)
		nmap <leader>8 <Plug>STLine.Go(8)
		nmap <leader>9 <Plug>STLine.Go(9)
		nmap <leader>0 <Plug>STLine.Go(10)
	endif

	" atsumori123/gr.vim
	if s:Enabled('gr.vim')
		noremap <silent><leader>g :Gr<CR>
		let g:GR_GrepCommand = 'vimgrep'
	endif

	" atsumori123/oldfiles.vim
	if s:Enabled('oldfiles.vim')
		nnoremap <leader>l :OL<CR>
	endif

	" atsumori123/minfy.vim
	if s:Enabled('minfy.vim')
		nnoremap <silent>\ :execute "Minfy ".expand("%:p:h")<CR>
	endif

	"easymotion/vim-easymotion
	if s:Enabled('vim-easymotion')
		let g:EasyMotion_do_mapping = 0
		let g:EasyMotion_smartcase = 1
		let g:EasyMotion_use_migemo = 1
		let g:EasyMotion_use_upper = 1
		let g:EasyMotion_keys='hklyuiopnm,qwertzxcvbasdgjf'
		nmap f <Plug>(easymotion-bd-f)
	endif

	" atsumori123/various.vim
	if s:Enabled('various.vim')
		nnoremap <leader>b <Plug>(various-buffers)<CR>
		nnoremap <leader>m <Plug>(various-marks)<CR>
		nnoremap <S-j> <Plug>(various-next-buffer)<CR>
		nnoremap <S-k> <Plug>(various-prev-buffer)<CR>
		nnoremap <leader>x <Plug>(various-close)<CR>
		nnoremap <C-p> <Plug>(various-preview)<CR>
		nnoremap <leader>q <Plug>(various-quickfix)<CR>
		nnoremap zc <Plug>(various-display-in-center)<CR>
		nnoremap <C-t> <Plug>(various-toggle-terminal)<CR>
		tnoremap <C-t> <Plug>(various-toggle-terminal)<CR>
		noremap <leader>r :Replace<CR>
		noremap <leader>t :Tips<CR>
	endif

	" test
	nnoremap <leader>[ :source ~/vimfiles/script/test.vim<CR>
endfunction

"***************************************
" Define plugin lazy setup
"***************************************
function! s:lazy_setup() abort
	"easymotion/vim-easymotion
	if s:Enabled('vim-easymotion')
		highlight EasyMotionTarget cterm=bold ctermbg=black ctermfg=cyan gui=bold guibg=black guifg=cyan
	endif
endfunction

"***************************************
" Plugin add to runtimepath
"***************************************
for plugin in s:VimPlugins
	let path = s:VimPluginsPath . '/' . plugin
	if isdirectory(path)
		exec 'set runtimepath+=' . path
	endif
endfor
call s:load_config()

augroup LazySetup
	autocmd!
	autocmd vimenter * call s:lazy_setup()
augroup END

